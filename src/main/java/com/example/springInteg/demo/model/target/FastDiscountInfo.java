/*
 * FastDiscount
 * Add, delete and modify fast discount for subscriber or a group
 *
 * OpenAPI spec version: V1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.example.springInteg.demo.model.target;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import org.springframework.validation.annotation.Validated;

import java.util.Objects;

/**
 * The List of FastDiscount
 */
@Validated
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-03-19T08:51:48.657Z")
public class FastDiscountInfo {
  @JsonProperty("targetOfferID")
  private Integer targetOfferID = null;

  @JsonProperty("usageType")
  private Integer usageType = null;

  @JsonProperty("discountType")
  private Integer discountType = null;

  @JsonProperty("discountValue")
  private Integer discountValue = null;

  @JsonProperty("validMode")
  private Integer validMode = null;

  @JsonProperty("effectiveDate")
  private String effectiveDate = null;

  @JsonProperty("expireDate")
  private String expireDate = null;

  @JsonProperty("noOfCycles")
  private Integer noOfCycles = null;

  @JsonProperty("operationType")
  private Integer operationType = null;

  @JsonProperty("externalID")
  private String externalID = null;

  @JsonProperty("fastDisountInstanceID")
  private Integer fastDisountInstanceID = null;

  @JsonProperty("extentionRule")
  private String extentionRule = null;

  @JsonProperty("defaultAccountDiscountFlag")
  private Integer defaultAccountDiscountFlag = null;

  public FastDiscountInfo targetOfferID(Integer targetOfferID) {
    this.targetOfferID = targetOfferID;
    return this;
  }

   /**
   * The ID of offer for which discount will be applied. It could be the ID of PrimaryOffer or OptionalOffer. Can be null if discount is to be applied to specific service (like Voice or SMS or Data)
   * @return targetOfferID
  **/
  @ApiModelProperty(value = "The ID of offer for which discount will be applied. It could be the ID of PrimaryOffer or OptionalOffer. Can be null if discount is to be applied to specific service (like Voice or SMS or Data)")
  public Integer getTargetOfferID() {
    return targetOfferID;
  }

  public void setTargetOfferID(Integer targetOfferID) {
    this.targetOfferID = targetOfferID;
  }

  public FastDiscountInfo usageType(Integer usageType) {
    this.usageType = usageType;
    return this;
  }

   /**
   * Field value to define on which service fast discount should be applied. 0: rent 1: Voice 2: Voice-Onnet 3: Voice-Offnet 4: Voice-PSTN 5: Voice-International 6: Voice-Roaming-MO 7: Voice-Roaming-MT 8: SMS 9: SMS-National 10: SMS-International  11: SMS-Roaming 12: Data 13: Data-National 14: Data-Roaming 15: MMS 16: MMS-National 17: MMS-International 18: Bulk service
   * @return usageType
  **/
  @ApiModelProperty(required = true, value = "Field value to define on which service fast discount should be applied. 0: rent 1: Voice 2: Voice-Onnet 3: Voice-Offnet 4: Voice-PSTN 5: Voice-International 6: Voice-Roaming-MO 7: Voice-Roaming-MT 8: SMS 9: SMS-National 10: SMS-International  11: SMS-Roaming 12: Data 13: Data-National 14: Data-Roaming 15: MMS 16: MMS-National 17: MMS-International 18: Bulk service")
  public Integer getUsageType() {
    return usageType;
  }

  public void setUsageType(Integer usageType) {
    this.usageType = usageType;
  }

  public FastDiscountInfo discountType(Integer discountType) {
    this.discountType = discountType;
    return this;
  }

   /**
   * 0: Percentage 1: Amount 2: Predefined (eligible only for usageType 0: rent )
   * @return discountType
  **/
  @ApiModelProperty(required = true, value = "0: Percentage 1: Amount 2: Predefined (eligible only for usageType 0: rent )")
  public Integer getDiscountType() {
    return discountType;
  }

  public void setDiscountType(Integer discountType) {
    this.discountType = discountType;
  }

  public FastDiscountInfo discountValue(Integer discountValue) {
    this.discountValue = discountValue;
    return this;
  }

   /**
   * Percentage discount value or amount discount value or predefine discount rule ID For percentage, range is [0-10000]
   * @return discountValue
  **/
  @ApiModelProperty(required = true, value = "Percentage discount value or amount discount value or predefine discount rule ID For percentage, range is [0-10000]")
  public Integer getDiscountValue() {
    return discountValue;
  }

  public void setDiscountValue(Integer discountValue) {
    this.discountValue = discountValue;
  }

  public FastDiscountInfo validMode(Integer validMode) {
    this.validMode = validMode;
    return this;
  }

   /**
   * Validity based on number of cycles OR effectiveDate and expireDate 0: Effective and expire date 1: number of Cycles
   * @return validMode
  **/
  @ApiModelProperty(required = true, value = "Validity based on number of cycles OR effectiveDate and expireDate 0: Effective and expire date 1: number of Cycles")
  public Integer getValidMode() {
    return validMode;
  }

  public void setValidMode(Integer validMode) {
    this.validMode = validMode;
  }

  public FastDiscountInfo effectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * The effective date of the fastdiscount. YYYYMMDD000000
   * @return effectiveDate
  **/
  @ApiModelProperty(value = "The effective date of the fastdiscount. YYYYMMDD000000")
  public String getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }

  public FastDiscountInfo expireDate(String expireDate) {
    this.expireDate = expireDate;
    return this;
  }

   /**
   * The expiry date of the fastdiscount. YYYYMMDD000000
   * @return expireDate
  **/
  @ApiModelProperty(value = "The expiry date of the fastdiscount. YYYYMMDD000000")
  public String getExpireDate() {
    return expireDate;
  }

  public void setExpireDate(String expireDate) {
    this.expireDate = expireDate;
  }

  public FastDiscountInfo noOfCycles(Integer noOfCycles) {
    this.noOfCycles = noOfCycles;
    return this;
  }

   /**
   * Number of cycles for which fast discount should be valid
   * @return noOfCycles
  **/
  @ApiModelProperty(value = "Number of cycles for which fast discount should be valid")
  public Integer getNoOfCycles() {
    return noOfCycles;
  }

  public void setNoOfCycles(Integer noOfCycles) {
    this.noOfCycles = noOfCycles;
  }

  public FastDiscountInfo operationType(Integer operationType) {
    this.operationType = operationType;
    return this;
  }

   /**
   * 0: Add 1: Modify 2: Delete
   * @return operationType
  **/
  @ApiModelProperty(required = true, value = "0: Add 1: Modify 2: Delete")
  public Integer getOperationType() {
    return operationType;
  }

  public void setOperationType(Integer operationType) {
    this.operationType = operationType;
  }

  public FastDiscountInfo externalID(String externalID) {
    this.externalID = externalID;
    return this;
  }

   /**
   * External identifier for fast discount. This ID will be created and maintained by external system. CCS will internally use fastdiscountInstanceID field to manage fastDiscount. externalID field will not be maintained or validated in CCS. This ID will be sent back in response message.
   * @return externalID
  **/
  @ApiModelProperty(value = "External identifier for fast discount. This ID will be created and maintained by external system. CCS will internally use fastdiscountInstanceID field to manage fastDiscount. externalID field will not be maintained or validated in CCS. This ID will be sent back in response message.")
  public String getExternalID() {
    return externalID;
  }

  public void setExternalID(String externalID) {
    this.externalID = externalID;
  }

  public FastDiscountInfo fastDisountInstanceID(Integer fastDisountInstanceID) {
    this.fastDisountInstanceID = fastDisountInstanceID;
    return this;
  }

   /**
   * Not required for fast discount addition Required if fast discount is being modified or deleted.
   * @return fastDisountInstanceID
  **/
  @ApiModelProperty(value = "Not required for fast discount addition Required if fast discount is being modified or deleted.")
  public Integer getFastDisountInstanceID() {
    return fastDisountInstanceID;
  }

  public void setFastDisountInstanceID(Integer fastDisountInstanceID) {
    this.fastDisountInstanceID = fastDisountInstanceID;
  }

  public FastDiscountInfo extentionRule(String extentionRule) {
    this.extentionRule = extentionRule;
    return this;
  }

   /**
   * eligibility rule ID defined in CCS for Fast Discount of Eligible/Non-Eligible Offers
   * @return extentionRule
  **/
  @ApiModelProperty(value = "eligibility rule ID defined in CCS for Fast Discount of Eligible/Non-Eligible Offers")
  public String getExtentionRule() {
    return extentionRule;
  }

  public void setExtentionRule(String extentionRule) {
    this.extentionRule = extentionRule;
  }

  public FastDiscountInfo defaultAccountDiscountFlag(Integer defaultAccountDiscountFlag) {
    this.defaultAccountDiscountFlag = defaultAccountDiscountFlag;
    return this;
  }

   /**
   * 0: not default account level discount 1: When the discount is applied to the account of the default group, the value of this parameter must be send as 1. If don’t sent “defaultAccountDiscountFlag”, the CCS will generate fast discount in group level.
   * @return defaultAccountDiscountFlag
  **/
  @ApiModelProperty(value = "0: not default account level discount 1: When the discount is applied to the account of the default group, the value of this parameter must be send as 1. If don’t sent “defaultAccountDiscountFlag”, the CCS will generate fast discount in group level.")
  public Integer getDefaultAccountDiscountFlag() {
    return defaultAccountDiscountFlag;
  }

  public void setDefaultAccountDiscountFlag(Integer defaultAccountDiscountFlag) {
    this.defaultAccountDiscountFlag = defaultAccountDiscountFlag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FastDiscountInfo fastDiscountInfo = (FastDiscountInfo) o;
    return Objects.equals(this.targetOfferID, fastDiscountInfo.targetOfferID) &&
        Objects.equals(this.usageType, fastDiscountInfo.usageType) &&
        Objects.equals(this.discountType, fastDiscountInfo.discountType) &&
        Objects.equals(this.discountValue, fastDiscountInfo.discountValue) &&
        Objects.equals(this.validMode, fastDiscountInfo.validMode) &&
        Objects.equals(this.effectiveDate, fastDiscountInfo.effectiveDate) &&
        Objects.equals(this.expireDate, fastDiscountInfo.expireDate) &&
        Objects.equals(this.noOfCycles, fastDiscountInfo.noOfCycles) &&
        Objects.equals(this.operationType, fastDiscountInfo.operationType) &&
        Objects.equals(this.externalID, fastDiscountInfo.externalID) &&
        Objects.equals(this.fastDisountInstanceID, fastDiscountInfo.fastDisountInstanceID) &&
        Objects.equals(this.extentionRule, fastDiscountInfo.extentionRule) &&
        Objects.equals(this.defaultAccountDiscountFlag, fastDiscountInfo.defaultAccountDiscountFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetOfferID, usageType, discountType, discountValue, validMode, effectiveDate, expireDate, noOfCycles, operationType, externalID, fastDisountInstanceID, extentionRule, defaultAccountDiscountFlag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FastDiscountInfo {\n");
    
    sb.append("    targetOfferID: ").append(toIndentedString(targetOfferID)).append("\n");
    sb.append("    usageType: ").append(toIndentedString(usageType)).append("\n");
    sb.append("    discountType: ").append(toIndentedString(discountType)).append("\n");
    sb.append("    discountValue: ").append(toIndentedString(discountValue)).append("\n");
    sb.append("    validMode: ").append(toIndentedString(validMode)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    expireDate: ").append(toIndentedString(expireDate)).append("\n");
    sb.append("    noOfCycles: ").append(toIndentedString(noOfCycles)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    externalID: ").append(toIndentedString(externalID)).append("\n");
    sb.append("    fastDisountInstanceID: ").append(toIndentedString(fastDisountInstanceID)).append("\n");
    sb.append("    extentionRule: ").append(toIndentedString(extentionRule)).append("\n");
    sb.append("    defaultAccountDiscountFlag: ").append(toIndentedString(defaultAccountDiscountFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

